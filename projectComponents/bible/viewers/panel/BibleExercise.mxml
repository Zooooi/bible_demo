<?xml version="1.0" encoding="utf-8"?>
<ext:JGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
			xmlns:s="library://ns.adobe.com/flex/spark" 
			xmlns:ext="JsF.ext.*"
			xmlns:viewers="projectComponents.bible.viewers.*" 
			xmlns:style="projectComponents.bible.viewers.style.*" 
			xmlns:panel="projectComponents.bible.viewers.panel.*" 
			xmlns:skin="projectSkin.skin.*" 
			xmlns:o="projectClass.vo.o.*"
			xmlns:item="projectComponents.bible.viewers.item.*" 
			xmlns:skin1="JsF.skin.*" 
			xmlns:ext2="JsF.components.scroller.ext.*" 
			xmlns:vo="projectComponents.bible.vo.*"
			
			left="0" right="-2" top="0" bottom="-2"
			>
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.utils.Platform;
			
			import spark.components.Group;
			
			import JsA.geom.ActImageResize;
			
			import JsC.events.JEvent;
			import JsC.events.JGameEvent;
			
			import JsF.components.scroller.act.JScrollerActDropScroller_desktop;
			
			import projectComponents.bible.viewers.item.Exercise_Score;
			import projectComponents.bible.vo.BibleScore;
			
			[Bindable]private var bControll:Boolean = true;
			
			
			private const nDegreeMax:uint = _exercise.degreeMax;
			private const nDegreeMin:uint = _exercise.degreeMin;
			private var grScore:Exercise_Score
			
			private function onJEvent(event:JEvent):void{
				switch(event.type)
				{
					case JEvent.STOP:
						scrollerSource.stopDroping()
						scrollerTarget.stopDroping()
						break;
				}
			}
			
			private function onGameEvent(event:JGameEvent):void
			{
				switch(event.type)
				{
					
					case JGameEvent.START:
						_grBlackboard.enabled = true
						break
					case JGameEvent.FINISH:
						_grBlackboard.enabled = false
						bControll = false;
						
						grScore = new Exercise_Score
						grScore._score = BibleScore(event._vo)
						grScore._exercise = _exercise
						grScore.addEventListener(JEvent.RESTART,onScoreEvent)
						grScore.addEventListener(JEvent.CHANGED,onScoreEvent)
						grScore.update()
						grBottom.addElement(grScore)
						break;
				}
			}
			
			
			
			protected function onScoreEvent(event:JEvent):void
			{
				switch(event.type)
				{
					case JEvent.CHANGED:
						bControll = true;
						_exercise.degree = event.i;
						$setting_diff.dispatchEvent(new FlexEvent(FlexEvent.CHANGE_END));
						break;
					case JEvent.RESTART:
						dispatchEvent(new JEvent(JEvent.RESTART));
						bControll = true;
						break
				}
			}
			
			protected function onMouseEvent(event:MouseEvent):void
			{
				var btn:Button = Button(event.currentTarget);
				btn.enabled = false;
				dispatchEvent(new JEvent(JEvent.RESTART));
				setTimeout(function():void{btn.enabled = true},500)
			}
		]]>
	</fx:Script>
	
	
	
	<fx:Metadata>
		/** from this */
		[Event(name="RESTART", type="JsC.events.JEvent")]
		[Event(name="CHANGED", type="JsC.events.JEvent")]
		
		/** from action */
		[Event(name="STOP", type="JsC.events.JEvent")]
		[Event(name="START", type="JsC.events.JGameEvent")]
		[Event(name="FINISH", type="JsC.events.JGameEvent")]
		
		[Event(name="SELECT", type="JsC.events.JEvent")]
	</fx:Metadata>
	
	<fx:Declarations>
		<vo:BibleOB id="_data"/>
		<vo:ExerciseVO id="_exercise"/>
	</fx:Declarations>
	
	<ext:preinitialize>
		<![CDATA[
		addEventListener(JEvent.STOP,onJEvent)
		addEventListener(JGameEvent.START,onGameEvent)
		addEventListener(JGameEvent.FINISH,onGameEvent)
		if (Platform.isDesktop)
		{
		}
		]]>
	</ext:preinitialize>
	
	<s:SparkSkin width="100%" height="100%">
		<style:RectBackGround_Exercise radiusX="0"/>
		
		<s:BitmapImage source="@Embed('/assets/imgs/bible/images/exercise_bg_00.png')" width="100%" height="100%" fillMode="repeat" smooth="true"  bottom="5" alpha="0.2" />
	</s:SparkSkin>
	<s:VGroup top="60" bottom="5" left="5" right="5" horizontalAlign="center" gap="7">
		
		<s:Group id="grTop"  width="100%" height="{blackboard.height}">
			<s:Image id="blackboard" source="@Embed('/assets/imgs/bible/images/exercise_blackboard.png')" horizontalCenter="0" height="100%" smooth="true"  left="-5" right="-5" horizontalAlign="center" verticalAlign="top">
				<s:preinitialize>
					<![CDATA[
					new ActImageResize(UIComponent(event.currentTarget))
					]]>
				</s:preinitialize>
			</s:Image>
			<s:VGroup top="20" bottom="50" left="10" right="10"  horizontalAlign="center" horizontalCenter="0">
				<s:Label text="{_data.sTitle}" styleName="exercise"/>
				<!-- ...............................................................target.................................................................................. -->
				<ext2:JScroller id="scrollerTarget" width="100%" height="100%" skinClass="JsF.components.scroller.skin.JScrollerHide_VScrollbarSkin" horizontalScrollPolicy="off">
					<ext2:preinitialize>
						<![CDATA[
							new JScrollerActDropScroller_desktop(scrollerTarget,_grBlackboard)
						]]>
					</ext2:preinitialize>
					<s:VGroup id="_grBlackboard" width="100%" height="100%"/>
				</ext2:JScroller>
			</s:VGroup>
			
		</s:Group>
		
		<s:Group width="100%" height="40%" >
			
			<style:RectButtonMenuNumber  horizontalCenter="0" height="100%" left="15" right="15">
				<style:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="0xffffff" alpha="0.5" ratio="0"/>
						<s:GradientEntry color="0xf1f1f1" alpha="0.5" ratio="0.5"/>
						<s:GradientEntry color="0xa9a9a9" alpha="0.5" ratio="1"/>
					</s:LinearGradient>
				</style:fill>
			</style:RectButtonMenuNumber>
			
			<!-- ...............................................................source.................................................................................. -->
			<s:VGroup top="2" bottom="2" left="20" right="20"   horizontalAlign="center">
				<s:Group id="grBottom" verticalCenter="0" horizontalCenter="0" width="100%" height="100%">
					<ext2:JScroller id="scrollerSource" width="100%" height="100%" skinClass="JsF.components.scroller.skin.JScrollerHide_VScrollbarSkin" horizontalScrollPolicy="off">
						<ext2:preinitialize>
							<![CDATA[
							new JScrollerActDropScroller_desktop(scrollerSource,_grSource)
							]]>
						</ext2:preinitialize>
						<s:VGroup id="_grSource" width="100%" height="100%"/>
					</ext2:JScroller>
				</s:Group>
			</s:VGroup>
			
			
		</s:Group>
		
		<s:Group width="100%" height="50">
			<s:HGroup horizontalAlign="center" verticalAlign="middle" verticalCenter="0" horizontalCenter="0" gap="20" left="10" right="10">
				<s:HGroup horizontalAlign="left" verticalAlign="middle" enabled="{bControll}">
					<s:HSlider id="$setting_diff" width="100" maximum="{nDegreeMax}" minimum="{nDegreeMin}" value="@{_exercise.degree}" changeEnd="setTimeout(function():void{dispatchEvent(new JEvent(JEvent.CHANGED))},300)" skinClass="projectSkin.skin.HSlider_Exercise"/>
					<s:CheckBox width="{_view.reNum(_exercise.compare==0,0,40)}" height="40" skinClass="projectSkin.skin.Radio_Exercise_Compare" label="{String(_exercise.compare)}" styleName="exercise_slider" alpha="0.9" visible="{!_exercise.compare==0}" selected="@{_exercise.bCompare_Selected}"/>
					<s:CheckBox width="{_view.reNum(_exercise.tips==0,0,40)}" height="40" skinClass="projectSkin.skin.Radio_Exercise_Tips" label="{String(_exercise.tips)}" styleName="exercise_slider" alpha="0.9" visible="{!_exercise.tips==0}" selected="@{_exercise.bTips_Selected}"/>
					<s:Button  width="{_view.reNum(_exercise.fast==0,0,40)}" height="40" skinClass="projectSkin.skin.Button_Exercise_Fast" label="{String(_exercise.fast)}" styleName="exercise_slider" alpha="0.9" visible="{!_exercise.fast==0}" click="dispatchEvent(new JEvent(JEvent.SELECT))"/>
				</s:HGroup>
				<s:HGroup horizontalAlign="right" verticalAlign="middle" width="100%" >
					<s:Button skinClass="projectSkin.skin.Button_Close" width="30" height="30" click="Group(parent).removeElement(this)"/>
				</s:HGroup>
			</s:HGroup>
		</s:Group>
	</s:VGroup>
	<s:Group id="$draging"  left="0" right="0" top="0" bottom="0" clipAndEnableScrolling="false"/>
	
</ext:JGroup>
